{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","App.js","registerServiceWorker.js","index.js"],"names":["Business","react_default","a","createElement","className","src","this","props","business","imageSrc","alt","name","address","city","concat","state","zipCode","category","toUpperCase","rating","reviewCount","React","Component","BusinessList","businesses","map","components_Business_Business","key","id","SearchBar","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","term","location","sortBy","handleTermChange","bind","assertThisInitialized","handleLocationChange","handleSearch","handleSortByChange","sortByOptions","Best match","Highest rated","Most reviewed","sortByOption","setState","e","target","value","searchYelp","preventDefault","_this2","keys","sortByOptionValue","getSortByClass","onClick","renderSortByOptions","onChange","placeholder","Yelp","search","fetch","headers","Authorization","then","response","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","App","components_SearchBar_SearchBar","components_BusinessList_BusinessList","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.fdcd9fab.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Business.css';\r\n\r\nclass Business extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Business\">\r\n        <div className=\"image-container\">\r\n          <img src={this.props.business.imageSrc} alt=''/>\r\n        </div>\r\n        <h2>{this.props.business.name}</h2>\r\n        <div className=\"Business-information\">\r\n          <div className=\"Business-address\">\r\n            <p>{this.props.business.address}</p>\r\n            <p>{this.props.business.city}</p>\r\n            <p>{`${this.props.business.state} ${this.props.business.zipCode}`}</p>\r\n          </div>\r\n          <div className=\"Business-reviews\">\r\n            <h3>{this.props.business.category.toUpperCase()}</h3>\r\n            <h3 className=\"rating\">{`${this.props.business.rating} stars`}</h3>\r\n            <p>{`${this.props.business.reviewCount} reviews`}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Business;\r\n","import React from 'react';\r\nimport './BusinessList.css';\r\n\r\nimport Business from '../Business/Business';\r\n\r\nclass BusinessList extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"BusinessList\">\r\n        {this.props.businesses.map(business => {\r\n            return <Business business={business} key={business.id} />\r\n          })\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BusinessList;\r\n","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\n\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      \"term\": \"\",\r\n      \"location\": \"\",\r\n      \"sortBy\": \"best_match\"\r\n    };\r\n\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n    this.handleLocationChange = this.handleLocationChange.bind(this);\r\n    this.handleSearch = this.handleSearch.bind(this);\r\n    this.handleSortByChange = this.handleSortByChange.bind(this);\r\n\r\n    this.sortByOptions = {\r\n      \"Best match\": \"best_match\",\r\n      \"Highest rated\": \"rating\",\r\n      \"Most reviewed\": \"review_count\"\r\n    };\r\n  }\r\n\r\n  getSortByClass(sortByOption) {\r\n    if(this.state.sortBy === sortByOption) {\r\n      return \"active\";\r\n    }\r\n    else{\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  handleSortByChange(sortByOption) {\r\n    this.setState({\r\n      \"sortBy\": sortByOption\r\n    });\r\n  }\r\n\r\n  handleTermChange(e) {\r\n    this.setState({\r\n      \"term\": e.target.value\r\n    });\r\n  }\r\n\r\n  handleLocationChange(e) {\r\n    this.setState({\r\n      \"location\": e.target.value\r\n    });\r\n  }\r\n\r\n  handleSearch(e) {\r\n    this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n    e.preventDefault();\r\n  }\r\n\r\n  renderSortByOptions() {\r\n      return Object.keys(this.sortByOptions).map((sortByOption) => {\r\n        let sortByOptionValue = this.sortByOptions[sortByOption];\r\n        return (<li className={this.getSortByClass(sortByOptionValue)}\r\n                    key={sortByOptionValue}\r\n                    onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>\r\n                  {sortByOption}\r\n               </li>);\r\n      });\r\n    }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"SearchBar\">\r\n        <h1>Yum!</h1>\r\n          <div className=\"SearchBar-sort-options\">\r\n            <ul>\r\n                {this.renderSortByOptions()}\r\n            </ul>\r\n          </div>\r\n          <div className=\"SearchBar-fields\">\r\n            <input onChange={this.handleTermChange} placeholder=\"Search Businesses\" />\r\n            <input onChange={this.handleLocationChange} placeholder=\"Where?\" />\r\n          </div>\r\n          <div className=\"SearchBar-submit\">\r\n            <a onClick={this.handleSearch}>Go!</a>\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","const apiKey = 'bjVHXprski_9iHlDX6CK0QgXnBizad-kpKH6WOF4-UyUv2qF087QDxk4Hb9Dcbyo3T9N6RYZiUQhbC-peqwgYDI-TWyxSp5vk_3lxgSacZmCk3E13UyvVtdzKq6hWnYx';\r\n\r\nconst Yelp = {\r\n    search(term, location, sortBy) {\r\n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${apiKey}`\r\n            }\r\n        }).then(response => {\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            if (jsonResponse.businesses) {\r\n                return jsonResponse.businesses.map(business => ({\r\n                    id: business.id,\r\n                    imageSrc: business.image_url,\r\n                    name: business.name,\r\n                    address: business.location.address1,\r\n                    city: business.location.city,\r\n                    state: business.location.state,\r\n                    zipCode: business.location.zip_code,\r\n                    category: business.categories[0].title,\r\n                    rating: business.rating,\r\n                    reviewCount: business.review_count\r\n                }));\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\nexport default Yelp;","import React from 'react';\nimport './App.css';\n\nimport BusinessList from './components/BusinessList/BusinessList';\nimport SearchBar from './components/SearchBar/SearchBar';\n\nimport Yelp from './util/Yelp';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      businesses: []\n    };\n\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n\n  searchYelp(term, location, sortBy) {\n    Yelp.search(term, location, sortBy).then(businesses => {\n      this.setState({businesses: businesses});\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <SearchBar searchYelp={this.searchYelp} />\n        <BusinessList businesses={this.state.businesses} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}